import logging
from src.database import get_dropped_coins, add_dropped_coin, remove_dropped_coin
from src.telegram_bot import send_telegram_message

logger = logging.getLogger(__name__)

async def find_significant_drops(ticker_data, user_thresholds, chat_id):
    """
    –ù–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—ã —Å –ø–∞–¥–µ–Ω–∏–µ–º –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    :param ticker_data: –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ Poloniex
    :param user_thresholds: –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, [50, 30, 10])
    :param chat_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –¥–≤–∞ —Å–ª–æ–≤–∞—Ä—è: new_drops –∏ recovered_coins
    """
    new_drops = {}  # –ú–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–∞–ª–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    recovered_coins = []  # –ú–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —É–ø–∞–≤—à–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dropped_coins = get_dropped_coins(chat_id)
    dropped_coins_dict = {coin.coin: coin.threshold for coin in dropped_coins}

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤
    for data in ticker_data:
        try:
            coin = data.get("symbol", "")  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—É
            percent_change = float(data.get("dailyChange", "0")) * 100  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –≤ %
            volume = data.get("amount", "0")  # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–¥–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
            for threshold in user_thresholds:
                if percent_change <= -threshold:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—É –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–æ–≤–∞—è –∏–ª–∏ –µ–µ –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if coin not in dropped_coins_dict or dropped_coins_dict[coin] < threshold:
                        add_dropped_coin(chat_id, coin, threshold)
                        new_drops.setdefault(threshold, []).append({
                            "name": coin,
                            "volume": volume
                        })

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–∞–¥–µ–Ω–∏–∏
                    message = f"üìâ –ú–æ–Ω–µ—Ç–∞ {coin} —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ {threshold}%.\n–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {volume}"
                    await send_telegram_message(chat_id, message)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏–∏ {coin} –Ω–∞ {threshold}% –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")
                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
            if percent_change >= 0:
                if coin in dropped_coins_dict:
                    remove_dropped_coin(chat_id, coin)
                    recovered_coins.append(coin)
                    logger.info(f"–ú–æ–Ω–µ—Ç–∞ {coin} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –¥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.")
        except ValueError:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–µ—Ç—ã {coin}.")
            continue

    return new_drops, recovered_coins
